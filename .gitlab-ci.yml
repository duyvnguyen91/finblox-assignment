# My deployer image to be ran for stage job
image: vietduy0509/deployer:v1.1

variables:
  SERVICE_PATH: /recipes
  HOST: abc.xyz
  GIT_UBMODULE_STRATEGY: recursive
  GIT_STRATEGY: clone
  DOCKER_DRIVER: overlay

# Before Script for every job
.before_script: &before_script |
  export IMAGE_TAG=$CI_COMMIT_SHORT_SHA
  mkdir ~/.ssh
  echo "$GITLAB_RUNNER_PRIVATE_KEY" > ~/.ssh/id_rsa
  chmod 600 ~/.ssh/id_rsa
  ssh-keyscan gitlab.com >> ~/.ssh/known_hosts

  function docker-build() {
    aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 334687143702.dkr.ecr.ap-southeast-1.amazonaws.com/recipes
    docker build -t 334687143702.dkr.ecr.ap-southeast-1.amazonaws.com/$CI_PROJECT_NAME:$IMAGE_TAG .
    docker push 334687143702.dkr.ecr.ap-southeast-1.amazonaws.com/$CI_PROJECT_NAME:$IMAGE_TAG
  }

before_script:
  - *before_script

stages:
  - build
  - create secret
  - deploy

# Build docker image
# build image:
#   stage: build
#   tags:
#     - wecycle-runner
#   script: |
#     docker-build

create secret:
  stage: create secret
  tags:
    - wecycle-runner
  script: |
    cd k8s && kubectl apply -f sealed-secret.yaml

# Deploy deployment to EKS cluster
deploy recipes eks:
  when: manual
  allow_failure: false
  stage: deploy
  tags:
    - wecycle-runner
  variables:
    NAMESPACE: default
  script: |
    aws eks --region ap-southeast-1 update-kubeconfig --name duynv-cluster
    cd k8s && bash deploy.sh

# Dont mind the runner name, I re-use the runner of my previous project
# You can use the same stage with another tool, I just re-use gitlab-ci cuz I already had my AWS account connected to my Gitlab account
